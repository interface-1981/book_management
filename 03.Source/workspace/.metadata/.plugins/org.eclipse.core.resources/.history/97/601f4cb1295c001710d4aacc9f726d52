package service;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public abstract class AbstractDBAccessService {

	private static SessionFactory sessionfactory;

	private Session session;
	private Transaction trans;

	public AbstractDBAccessService() {

		if (sessionfactory == null) {
			Configuration config = new Configuration();
			config = config.configure();
			AbstractDBAccessService.sessionfactory = config.buildSessionFactory();
		}
	}

	protected void save(Object entity) {
		this.session.saveOrUpdate(entity);
	}

	protected void beginTransaction() {
		createSession();
		this.trans = this.session.beginTransaction();
	}

	protected void commit() {
		this.trans.commit();
	}

	protected void rollback() {
		if(this.trans.getStatus().canRollback()) {
			this.trans.rollback();
		}
	}

	private void createSession() {
		this.session = AbstractDBAccessService.sessionfactory.openSession();
	}

}
