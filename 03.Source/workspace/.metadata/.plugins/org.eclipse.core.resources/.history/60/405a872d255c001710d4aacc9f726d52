package service.impl;

import java.util.Date;

import org.apache.commons.math3.stat.descriptive.summary.Product;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.NativeQuery;
import org.springframework.stereotype.Component;

import service.AbstractDBAccessService;
import service.SampleService;

@Component
public class SampleServiceImpl extends AbstractDBAccessService implements SampleService{


	@Override
	public void save(SampleDto sampleDto) {

		Session session = super.createSession();
		Transaction trans = session.beginTransaction();
		Sample trade = product.getTrade();
		trade.setAuditTimeStamp(new Date());
		try {
			if (product.getTradeID() == 0) {
				@SuppressWarnings({ "rawtypes", "deprecation" })
				NativeQuery query = session.createSQLQuery("select coalesce(max(tradeid),0) from trade");
				@SuppressWarnings("deprecation")
				int id = (int) query.list().get(0);

				++id;
				product.setTradeID(id);
				if (!product.existsCashflow()) {
					product.generateCashflows();
				}

				session.save(product.getTrade());
				session.flush();
				trans.commit();
			} else {
				if (!product.existsCashflow()) {
					product.generateCashflows();
				}
				session.update(product.getTrade());
				session.flush();
				trans.commit();
			}
		} finally {
			if(trans.getStatus().canRollback()) {
				trans.rollback();
			}

			session.close();
		}
	}

}
